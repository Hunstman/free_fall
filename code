coeff = pref
St = 1/Re
epsilon = np.sqrt(Re*St)
pis = np.sqrt(np.pi)
lpl0 = np.sqrt(Re/St)

print(coeff)
print("Re: ", Re,"St: ", St, "$\epsilon$: ", epsilon)
print("lp: " , lpl0)



t_conv = np.zeros(steps) 
u = np.zeros(steps)# result for the particle velocity

time = np.linspace(0,Tmax,steps)


for t in range(1,steps-1):
    
    t_conv[t+1] = t_conv[t] + dt*u[t]
    total_integral = integral= 0
    term = 0

    for i in range(1,t-1):
        
        Aln = 0
        Aln = A(Re, x[Re][t],x[Re][i],t*dt,i*dt)

        if Aln != 0:
            derivative = (u[i+1]-u[i])/dt
            int1 = derivative/np.sqrt((t-i)*dt)
            int2 = u[i]/((t-i)*dt)
            first = 3/8*((-2+1/Aln**2)*special.erf(Aln)/Aln - 2*np.exp(-Aln**2)/(pis*Aln**2))*int1
            second = u[i]*3/8*(1/(2*Aln))*(1-1.5/Aln**2)*special.erf(Aln)/Aln+ 3*np.exp(-Aln**2)/(pis*Aln**2)*int2
            integral += (first + second)
         
        Al0 = 0        
        Al0 = A(Re, x[Re][t],x[Re][0],t*dt,0) 

        if Al0 != 0:  
            
            derivative0 = (u[t]-u[0])/dt
            int1 = derivative0/np.sqrt(t*dt)
            int2 = u[0]/(t*dt)
            first0 = 3/8*((-2+1/Al0**2)*special.erf(Al0)/Al0 - 2*np.exp(-Al0**2)/(pis*Al0**2))*int1
            second0 = u[0]*3/8*(1/(2*Al0))*(1-1.5/Al0**2)*special.erf(Al0)/Al0+ 3*np.exp(-Al0**2)/(pis*Al0**2)*int2
            term = (first0 + second0)
        
        else:
            
            term = 0
    total_integral = 0.5*term + integral
    u[t+1] =u[t] + coeff*dt*(1 - u[t] - (dt*total_integral))
