import numpy as np
from scipy import special
import matplotlib.pyplot as plt


#Functions
def A(Re,x1,xs,t,s):
    if t == s:
        return 0
    
    return np.sqrt(Re**2/(4*(t-s))*(x1-xs)**2)

#Active

def active(t):
    return  2*special.erf(t) + np.cos(4*t)

#First order coefficient function
def alpha(n,j):
    
    appo = 0
    if n==0:
        appo=0 # no history
    if j==0:
        appo = 1
    elif 0<j<n:
        appo = (j-1)**(3/2) + (j+1)**(3/2) - 2*j**(3/2)
    elif j == n:
        appo = (n-1)**(3/2) - n**(3/2) +3/2*np.sqrt(n)
    else:
        return "Error"
    return 4/3*appo

Tmax  = 15
dt = 1e-3
steps = int(Tmax/dt)

u = np.zeros(steps)
ub = np.zeros(steps)
traj_b = np.zeros(steps)
t_conv = np.zeros(steps)
time = np.zeros(steps)


rho = 8 #rho_p/rho_f
pr = 2*rho+1
nu = 2e-4
a = 1.5e-3
Ta = 0.4
Re = 0.12
pis = np.sqrt(np.pi)
added_mass = 1
epsilon = 9*(nu/a**2)**0.5*1/pr*(dt)**(1/2)


for t in range(steps):
    summ = 0
    traj_b[t] = traj_b[t-1] + dt*ub[t-1]  
    
    prefactor = 1/(1+(alpha(t,0)*epsilon))
    
    for j in range(0,t-1):
        summ += (alpha(t,j+1) - alpha(t-1,j))*ub[t-1-j]
        
    ub[t] =prefactor*(ub[t-1] + dt*2*(rho-1)*9.81/pr - (9*nu/a**2)*1/pr*dt*ub[t-1] - epsilon*summ)  
    #print(ub[t])
    time[t] = t*dt
    
#######################################
for t in range(1,steps-1):
    
    t_conv[t+1] = t_conv[t] + dt*u[t]
    total_integral = integral= 0
    term = 0

    for i in range(1,t-1):
        first = second = int1= int2= 0
        derivative = derivative0=0
        first0 = second0 = 0
        Aln= 0
        Aln= A(Re, t_conv[t], t_conv[i], t*dt, i*dt)
        
        if Aln != 0:
            derivative = (u[i+1]-u[i])/dt
            int1 = derivative/np.sqrt((t-i)*dt)
            int2 = u[i]/((t-i)*dt)
            first = -(3/8*(-2*np.exp(-Aln**2)/(Aln**2*pis)+(-2+1/Aln**2)*special.erf(Aln)/Aln))*int1            
            second = -(-3/(8*Aln)*(3*np.exp(-Aln**2)/(Aln**2*pis)+(1-3/(2*Aln**2))*special.erf(Aln)/Aln))*int2
            integral += (first + Re*second)
            
        Al0 = 0        
        Al0 = A(Re, t_conv[t], t_conv[0],t*dt,0) 

        if Al0 != 0:  
            
            derivative0 = (u[t]-u[0])/dt
            int1 = derivative0/np.sqrt(t*dt)
            int2 = u[0]/(t*dt)
            first0 = -(3/8*(-2*np.exp(-Al0**2)/(Al0**2*pis)+(-2+1/Al0**2)*special.erf(Al0)/Al0))*int1            
            second0 = -(-3/(8*Al0)*(3*np.exp(-Al0**2)/(Al0**2*pis)+(1-3/(2*Al0**2))*special.erf(Al0)/Al0))*int2
            
            term = (first0 + Re*second0)
        
        else:
            term = 0
            
    total_integral = 0.5*term + integral
    
    u[t+1] =u[t] + dt*((1-1/rho)*9.81 - 9/2*(nu/a**2)*(1/rho)*(u[t] + Ta*dt*total_integral))  
    
    #############################plots################################
    
    plt.figure(figsize=(10,9))
plt.title('Settling Re= '+str(Re))

plt.ylabel('U(t)')
plt.xlabel('t')


plt.plot(time[:],u[:],'-.',c='red',label="Conv")
plt.plot(time[:],ub[:],'-',c='blue',label="Basset")

A = 2*(rho-1)*9.81*1/pr
B = 9*nu/a**2*1/pr
C = 9*(nu/a**2)*1/pr
#plt.plot(time,-A*(np.exp((B/2-0.5*np.sqrt(B**2+4*C))*time)-np.exp((B/2+0.5*np.sqrt(B**2+4*C))*time))/np.sqrt(B**2+4*C))
plt.hlines((2*(rho-1)*(a**2)*9.81)/(9*nu),0,Tmax)
plt.hlines((1-0.1)*(2*(rho-1)*(a**2)*9.81)/(9*nu),0,Tmax)
plt.ylabel('U(t)')

plt.xlabel('t')
plt.legend()
plt.rcParams.update({'font.size': 30})
plt.show()
    
