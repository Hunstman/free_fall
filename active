import numpy as np
import math
import matplotlib.pyplot as plt
from scipy import special
import numba as nb
from numba import njit
import pandas as pd
import csv
from itertools import cycle
import my_plot as mp

#Functions
def A(Re,x1,xs,t,s):
    if t == s:
        return 0
    
    return np.sqrt(Re**2/(4*(t-s))*(x1-xs)**2)

#Active

def active(t):
    return  2*special.erf(4*t) + np.cos(4*t)
    
    #############################Convective
Tmax = 15
dt = 0.01
steps = int(Tmax/dt)

rho = 8 #rho_p/rho_f
pr = 2*rho
nu = 2e-4
a = 1.5e-3
Re = 0.12
pis = np.sqrt(np.pi)

Re = 0.5
St = 1/Re
epsilon = np.sqrt(Re*St)
pis = np.sqrt(np.pi)
lpl0 = np.sqrt(Re/St)

print("Re: ", Re,"St: ", St, "$\epsilon$: ", epsilon)
print("lp: " , lpl0)

ub = np.zeros(steps)
traj_b = np.zeros(steps)
time = np.zeros(steps)
v = np.zeros(steps)

########################################
for t in range(steps-1):
    
    t_conv[t+1] = t_conv[t] + dt*v[t]
    total_integral = integral= 0
    term = 0

    for i in range(1,t-1):
        first = second = int1= int2= 0
        derivative = derivative0=0
        first0 = second0 = 0
        Aln= 0
        Aln= A(Re, t_conv[t], t_conv[i], t*dt, i*dt)
        
        if Aln != 0:
            derivative = (v[i+1]-v[i])/dt
            int1 = derivative/np.sqrt((t-i)*dt)
            int2 = v[i]/((t-i)*dt)
            first = -(3/8*(-2*np.exp(-Aln**2)/(Aln**2*pis)+(-2+1/Aln**2)*special.erf(Aln)/Aln))*int1            
            second = -(-3/(8*Aln)*(3*np.exp(-Aln**2)/(Aln**2*pis)+(1-3/(2*Aln**2))*special.erf(Aln)/Aln))*int2
            integral += (first + Re*second)
            
        Al0 = 0        
        Al0 = A(Re, t_conv[t], t_conv[0],t*dt,0) 

        if Al0 != 0:  
            
            derivative0 = (v[t]-v[0])/dt
            int1 = derivative0/np.sqrt(t*dt)
            int2 = v[0]/(t*dt)
            first0 = -(3/8*(-2*np.exp(-Al0**2)/(Al0**2*pis)+(-2+1/Al0**2)*special.erf(Al0)/Al0))*int1            
            second0 = -(-3/(8*Al0)*(3*np.exp(-Al0**2)/(Al0**2*pis)+(1-3/(2*Al0**2))*special.erf(Al0)/Al0))*int2
            
            term = (first0 + Re*second0)
        
        else:
            term = 0
            
    total_integral = 0.5*term + integral
    
    u[t+1] =u[t] - dt*( 9/2*(nu/a**2)*(1/rho)*(v[t] + dt*total_integral))  
    v[t+1] = u[t+1] - active((t+1)*dt)
    
    
    
    ###########Basset
    
    #First order coefficient function
def alpha(n,j):
    
    appo = 0
    if n==0:
        appo=0 # no history
    if j==0:
        appo = 1
    elif 0<j<n:
        appo = (j-1)**(3/2) + (j+1)**(3/2) - 2*j**(3/2)
    elif j == n:
        appo = (n-1)**(3/2) - n**(3/2) +3/2*np.sqrt(n)
    else:
        return "Error"
    return 4/3*appo
    
    
    

ub = np.zeros(steps)
traj_b = np.zeros(steps)
time = np.zeros(steps)



added_mass = 1
epsilon = 9*(nu/a**2)**0.5*1/pr*(dt)**(1/2)


for t in range(steps):
    
    summ = 0
    traj_b[t] = traj_b[t-1] + dt*v[t-1]  
    
    prefactor = 1/(1+(alpha(t,0)*epsilon))
    
    for j in range(0,t-1):
        summ += (alpha(t,j+1) - alpha(t-1,j))*v[t-1-j]
        
    ub[t] =prefactor*(ub[t-1] - (9*nu/a**2)*1/pr*dt*v[t-1] - epsilon*summ)  
    v[t] = ub[t] - active(t*dt)
    #print(ub[t])
    time[t] = t*dt
